local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("LOCKED| Egotistical Hub", "Ocean")

-- MAIN
local Tab = Window:NewTab("Lobby")
local UsefulSection = Tab:NewSection("")

UsefulSection:NewButton("Faster Load In", "useful", function()
    game:GetService("ReplicatedStorage"):WaitForChild("Loaded"):FireServer()
end)

UsefulSection:NewButton("Auto Tournament Que", "", function()
    game:GetService("ReplicatedStorage"):WaitForChild("QueueToTournament"):FireServer()

end)

local Tab = Window:NewTab("Shots")
local ShootingSection = Tab:NewSection("Straight Shots")

ShootingSection:NewButton("29 METERS SHOOTING ZONE", "", function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    
    -- Function to create the part with the image and label
    local function createShootingZone(position)
        -- Create a new part
        local part = Instance.new("Part")
        part.Size = Vector3.new(60, 1, 60) -- Adjust size as needed
        part.Position = position -- Set the position
        part.Anchored = true
        part.CanCollide = false -- Ensure the part does not collide with the player or objects
        part.CanQuery = false -- Ensure the part does not interfere with the cursor
        part.Transparency = 1 -- Make the part fully transparent
    
        -- Create a new decal
        local decal = Instance.new("Decal")
        decal.Texture = "rbxassetid://196969716" -- Set the image ID
        decal.Color3 = Color3.new(255, 255, 255) -- Set the color to white
        decal.Face = Enum.NormalId.Top -- Apply the decal to the top face of the part
        decal.Parent = part
    
        -- Create a BillboardGui for the label
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Size = UDim2.new(0, 200, 0, 50) -- Size of the BillboardGui
        billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Position the BillboardGui above the part
        billboardGui.Adornee = part
        billboardGui.Parent = part
    
        -- Create a TextLabel
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0) -- Cover the whole BillboardGui
        textLabel.Text = "SHOOTING ZONE"
        textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text color
        textLabel.BackgroundTransparency = 1 -- Make the background transparent
        textLabel.TextScaled = true -- Scale text to fit
        textLabel.TextStrokeTransparency = 0.5 -- Add stroke for better visibility
        textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Black stroke color for text
        textLabel.Font = Enum.Font.SourceSansBold -- Set the font to SourceSansBold
        textLabel.Parent = billboardGui
    
        -- Parent the part to the Workspace
        part.Parent = workspace
        
        return part
    end
    
    -- Create the first shooting zone
    local part1 = createShootingZone(Vector3.new(-353, 1, -66))
    
    -- Create the second shooting zone
    local part2 = createShootingZone(Vector3.new(158, 1, -66))
    
    local duration = 30
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = player
    
        local function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function calculatePower(holdDuration)
        local minPower = 160 -- Minimum power
        local maxPower = 222 -- Maximum power
        local maxHoldTime = .6 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(mousePosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit
    
        local args = {
            [1] = shootDirection + player.Character.HumanoidRootPart.CFrame.UpVector / 15,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection, inputEndedConnection
    
    local function onPlayerInRange()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
    
        inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            checkDuration()
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.MouseButton2 then
                rightClickStartTime = tick()
                wait(0.1)
                playAnimation(13082657041, 1)
            end
        end)
    
        inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
            checkDuration()
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.MouseButton2 then
                refreshAnimations()
                playAnimation(12830711336, 1)
                
                local mouse = player:GetMouse()
                local mousePosition = mouse.Hit.p
                local holdDuration = tick() - rightClickStartTime
                fireShot(mousePosition, holdDuration)
            end
        end)
    
        -- Schedule the script to stop after the duration
        delay(duration, function()
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end)
    end
    
    local function createRegionCheck(part)
        local region = Region3.new(
            part.Position - (part.Size / 2),
            part.Position + (part.Size / 2)
        )
    
        while true do
            wait(1)
            local partsInRegion = workspace:FindPartsInRegion3(region, nil, 10)
            local playerInRange = false
            for _, part in pairs(partsInRegion) do
                if part.Parent and part.Parent:FindFirstChild("Humanoid") and part.Parent.Name == player.Name then
                    playerInRange = true
                    break
                end
            end
            if playerInRange then
                onPlayerInRange()
                wait(0.1)  -- Wait for the duration plus a little buffer before checking again
            end
        end
    end
    
    -- Create region checks for both parts
    spawn(function() createRegionCheck(part1) end)
    spawn(function() createRegionCheck(part2) end)       
end)

ShootingSection:NewKeybind("BlitzKrieg: Lightning Strike", "", Enum.KeyCode.NumLock, function()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local args = {
                [1] = hrp.CFrame.LookVector*1.0629 + hrp.CFrame.UpVector/upVectorDampen,
                [2] = 0,
                [3] = false,
                [4] = false,
                [5] = false,
                [6] = false,
                [7] = false,
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 0,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = true,
                [16] = false,
                [17] = false,
                [18] = false
            }
    
            ReplicatedStorage:WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = 6.9
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 14
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()    
wait(0.3)
game:GetService("Players").PutUsernameHere.Backpack.Emperor.Value = "1"
 end)
 
 ShootingSection:NewKeybind("Kaiser Impact: Half Volley", "", Enum.KeyCode.NumLock, function()
    game:GetService("Players").PutUsernameHere.Backpack.Emperor.Value = "2"
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.12)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    
    -- Get the position of the character's HumanoidRootPart
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local characterPosition = humanoidRootPart.Position
    
    -- Get the direction towards the cursor
    local direction = (mouse.Hit.p - characterPosition).unit
    
    -- Construct the arguments table with the direction as LookVector
        local args = {
            [1] = direction * 1.2 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/17,
            [2] = 222,
            [3] = false,
            [4] = false,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 0,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = true,
            [16] = false,
            [17] = false,
            [18] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
wait(0.3)
game:GetService("Players").PutUsernameHere.Backpack.Emperor.Value = "1"
 end)

ShootingSection:NewKeybind("All-PowerFul Shot: QuickDraw Shot", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local duration = 2 -- Duration in seconds
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = game:GetService("Players").PutUsernameHere
        
        function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function calculatePower(holdDuration)
        local minPower = 222 -- Minimum power
        local maxPower = 265 -- Maximum power
        local maxHoldTime = 0.7 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(mousePosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit
    
        local args = {
            [1] = shootDirection,
            [2] = power,
            [3] = false,
            [4] = false,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = true
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            rightClickStartTime = tick()
            refreshAnimations()
            wait(0.1)
            playAnimation(13082657041, 1)
        end
    end)
    
    local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            refreshAnimations()
            playAnimation(12830711336, 1)
            
            local mouse = player:GetMouse()
            local mousePosition = mouse.Hit.p
            local holdDuration = tick() - rightClickStartTime
            fireShot(mousePosition, holdDuration)
        end
    end)
    
    -- Schedule the script to stop after the duration
    delay(duration, function()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end)
    game:GetService("Players").PutUsernameHere.Backpack.Trait.Ambidextrous:Destroy()
end)

ShootingSection:NewKeybind("Rabona: Chip Shot", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local box1 = game.Workspace.Box.Box1
local box2 = game.Workspace.Box.Box2
local sensorGoals = game.Workspace.SensorGoals

-- Function to aim at a target
local function aimAtTarget(target)
    -- Your aiming logic here, for example:
    player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
end

-- Function to fire a shot with specific arguments
local function fireShot()
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,  -- Placeholder, fill in with appropriate value if needed
        [2] = -90,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end

-- Check which box the player is in and aim accordingly
if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
    aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
else
    aimAtTarget(Workspace.SensorGoals.SensorGoal)
end

-- Fire the shot
fireShot()   
end)

local ShootingSection = Tab:NewSection("Volleys")

ShootingSection:NewKeybind("Backflip Volley", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 16013434132,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*2 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector/1.75,
    [2] = 65,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = false,
    [7] = false,
    [9] = false,
    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
    [11] = 40,
    [12] = false,
    [13] = false,
    [14] = false,
    [15] = false,
    [16] = false,
    [17] = false,
    [18] = false
}

game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

wait(0.9)

    local TweenService = game:GetService("TweenService")
    local Players = game:GetService("Players")
    
    local speaker = Players.PutUsernameHere
    local plr = Players.PutUsernameHere
    local args = {
        [1] = 12830711336,
        [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    
        -- Rotate the character upside down slowly using a Tween after playing the animation
        local humanoidRootPart = pchar:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local targetCFrame = humanoidRootPart.CFrame * CFrame.Angles(math.rad(180), 0, 0)
            local tweenInfo = TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})
            
            -- Wait a short moment before starting the tween
            wait(0.1) -- Adjust this value as needed
            
            tween:Play()
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end

    local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.5,
    [2] = 141,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = false,
    [7] = false,
    [9] = false,
    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
    [11] = 40,
    [12] = false,
    [13] = false,
    [14] = false,
    [15] = false,
    [16] = false,
    [17] = false,
    [18] = false
}

game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
 end)

ShootingSection:NewKeybind("Bee Shot: Flexible Volley", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

local speaker = Players.PutUsernameHere
local plr = Players.PutUsernameHere
local args = {
    [1] = 12830711336,
    [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end

    -- Rotate the character upside down slowly using a Tween after playing the animation
    local humanoidRootPart = pchar:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local targetCFrame = humanoidRootPart.CFrame * CFrame.Angles(math.rad(60), 1000, 0)
        local tweenInfo = TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})
        
        -- Wait a short moment before starting the tween
        wait(0) -- Adjust this value as needed
        
        tween:Play()
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    -- Assuming this script is a LocalScript inside the character
    
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Function to handle jumping with increased JumpPower
    local function jumpWithIncreasedPower()
        if humanoid then
            -- Increase the JumpPower
            humanoid.JumpPower = 200 -- Adjust this value as needed
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            -- Reset JumpPower after jumping (optional)
            humanoid.JumpPower = 15 -- Default JumpPower value
        end
    end
    
    -- Call the function to make the character jump with increased power
    jumpWithIncreasedPower()
wait(0.1)

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Function to check if player is inside a specific box
local function isInBox(boxName)
    local playerPos = player.Character and player.Character.HumanoidRootPart.Position
    if playerPos then
        local box = game.Workspace.Box:FindFirstChild(boxName)
        if box then
            local boxPosition = box.Position
            local boxSize = box.Size / 2 -- Get half the size of the box for accurate comparison
            return (playerPos.X >= boxPosition.X - boxSize.X and playerPos.X <= boxPosition.X + boxSize.X and
                    playerPos.Y >= boxPosition.Y - boxSize.Y and playerPos.Y <= boxPosition.Y + boxSize.Y and
                    playerPos.Z >= boxPosition.Z - boxSize.Z and playerPos.Z <= boxPosition.Z + boxSize.Z)
        end
    end
    return false
end

-- Check if player is inside Box1 or Box2
if isInBox("Box1") or isInBox("Box2") then
    -- Get the position of the character's HumanoidRootPart
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local characterPosition = humanoidRootPart.Position
    
    -- Get the direction towards the cursor
    local direction = (mouse.Hit.p - characterPosition).unit
    
    -- Construct the arguments table with the direction as LookVector
    local args = {
        [1] = direction,
        [2] = 141,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
else
    -- Player is not inside Box1 or Box2, do nothing
end  
end)

ShootingSection:NewKeybind("Spatial Awareness: Reflex Volley", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local box1 = game.Workspace.Box.Box1
local box2 = game.Workspace.Box.Box2
local sensorGoals = game.Workspace.SensorGoals

-- Function to aim at a target
local function aimAtTarget(target)
    -- Your aiming logic here, for example:
    player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
end

-- Function to fire a shot with specific arguments
local function fireShot()
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/14,  -- Placeholder, fill in with appropriate value if needed
        [2] = -141,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end

-- Check which box the player is in and aim accordingly
if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
    aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
else
    aimAtTarget(Workspace.SensorGoals.SensorGoal)
end

-- Fire the shot
fireShot()    
end)

ShootingSection:NewKeybind("Juggling Shot: Instantaneous Trap Volley", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 85,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.2)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    wait(0.1)
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
        local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4,
        [2] = -150,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
        local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = -1,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)


ShootingSection:NewKeybind("Breakdance Core Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 25,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    
    wait(0.2)
    
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 60,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    
    wait(0.8)
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector,
        [2] = 272,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
end)


ShootingSection:NewKeybind("Two Stage Feint Volley Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.4)
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
            [2] = 99,
            [3] = false,
            [4] = false,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    
    wait(0.5)
    
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.4)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
            local args = {
            [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4,
            [2] = -155,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
            local args = {
            [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
            [2] = -1,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

ShootingSection:NewKeybind("BLT Shot", "", Enum.KeyCode.NumLock, function()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*1.35,
            [2] = 0,
            [3] = 40,
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
end)
ShootingSection:NewKeybind("Black Hole Shot", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 90,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.7)
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4,
        [2] = 0,
        [3] = 40,
        [4] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("ChestBump"):FireServer(unpack(args))
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.43)
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4,
        [2] = -70,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
        local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = -50,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

ShootingSection:NewKeybind("Trap Shot", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 90,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.7)
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4,
        [2] = 0,
        [3] = 40,
        [4] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("ChestBump"):FireServer(unpack(args))
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.6)
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4,
        [2] = -70,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
        local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = -50,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

ShootingSection:NewKeybind("Direct Shot: Flawless Volley", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local ball = game.Workspace.BallFolder:WaitForChild("Ball")
    local range = 10 -- Set your desired range here
    local isRemoteExecuted = false
    
    -- Function to check if player is inside a specific box
    local function isInBox(box)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local playerPos = humanoidRootPart.Position
    
        local boxPosition = box.Position
        local boxSize = box.Size / 2 -- Get half the size of the box for accurate comparison
        return (playerPos.X >= boxPosition.X - boxSize.X and playerPos.X <= boxPosition.X + boxSize.X and
                playerPos.Y >= boxPosition.Y - boxSize.Y and playerPos.Y <= boxPosition.Y + boxSize.Y and
                playerPos.Z >= boxPosition.Z - boxSize.Z and playerPos.Z <= boxPosition.Z + boxSize.Z)
    end
    
    -- Function to check if ball is within a specific range of the player
    local function isBallInRange()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local ballPosition = ball.Position
        local characterPosition = humanoidRootPart.Position
        local distance = (ballPosition - characterPosition).magnitude
        return distance <= range
    end
    
    -- Function to execute the remote
    local function executeRemote()
        if not isRemoteExecuted then
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            local characterPosition = humanoidRootPart.Position
    
            -- Get the direction towards the cursor
            local direction = (mouse.Hit.p - characterPosition).unit
    
            -- Construct the arguments table with the direction as LookVector
            local args = {
                [1] = direction * 1.5 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/20,
                [2] = 222,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = true,
                [7] = false,
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false
            }
    
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
            isRemoteExecuted = true
        end
    end
    local Players = game:GetService("Players")
local speaker = Players.PutUsernameHere
local Ball = Workspace.BallFolder.Ball
local range = 10 -- Set your desired range here
local AnimationId = 13082657041
local AnimationSpeed = 1

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(AnimationSpeed)
    
    local connection
    connection = game:GetService("RunService").Heartbeat:Connect(function()
        if (Ball.Position - pchar.HumanoidRootPart.Position).Magnitude <= range then
            k:Stop()
            connection:Disconnect()
        end
    end)
else
    print('R6 Required: This command requires the r6 rig type')
end

    game:GetService("RunService").RenderStepped:Connect(function()
        local box1 = game.Workspace.Box:FindFirstChild("Box1")
        local box2 = game.Workspace.Box:FindFirstChild("Box2")
        
        if (box1 and isInBox(box1)) or (box2 and isInBox(box2)) then
            if isBallInRange() then
                executeRemote()
            end
        end
    end)
end)

ShootingSection:NewKeybind("Lefty Direct Volley: Incomplete Volley", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/5.5,
        [2] = 50,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = true,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.3,
        [2] = 0,
        [3] = 40,
        [4] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

ShootingSection:NewKeybind("Backheel Direct Shot: Impact Point Backheel", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/5.5,
        [2] = 50,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = true,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 0,
        [3] = 40,
        [4] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

ShootingSection:NewKeybind("Direct Impact: Pinpoint Volley", "", Enum.KeyCode.NumLock, function()
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    local player = Players.PutUsernameHere
    local ball = workspace.BallFolder.Ball
    local range = 10 -- Define the range within which the second animation should play
    
    local secondAnimationId = 12830711336
    local animationSpeed = 1
    
    local function playAnimation(animationId, character)
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://"..animationId
        local humanoid = character:FindFirstChildOfClass('Humanoid')
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()
        animationTrack:AdjustSpeed(animationSpeed)
        return animationTrack
    end
    
    local function stopAnimation(animationTrack)
        if animationTrack and animationTrack.IsPlaying then
            animationTrack:Stop()
        end
    end
    
    local function isR15(character)
        return character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15
    end
    
    if not isR15(player.Character) then
        local pchar = player.Character
    
        local connection
        connection = RunService.Heartbeat:Connect(function()
            local distance = (pchar.PrimaryPart.Position - ball.Position).Magnitude
            if distance <= range then
                playAnimation(secondAnimationId, pchar)
                
                -- Get the direction towards the cursor
                local mouse = player:GetMouse()
                local direction = (mouse.Hit.p - pchar.HumanoidRootPart.Position).unit
    
                -- Define arguments for the server event
                local args = {
                    [1] = workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector * 1.35 + workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/9, -- Use direction instead of LookVector
                    [2] = 222,
                    [3] = false,
                    [4] = true,
                    [5] = false,
                    [6] = false,
                    [7] = false,
                    [9] = false,
                    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                    [11] = 40,
                    [12] = false,
                    [13] = false,
                    [14] = false,
                    [15] = true,
                    [16] = false,
                    [17] = false,
                    [18] = false
                }
    
                -- Fire the server event with the updated arguments
                ReplicatedStorage:WaitForChild("shoot"):FireServer(unpack(args))
    
                connection:Disconnect()
            end
        end)
    else
        warn('R6 Required', 'This command requires the R6 rig type')
    end    
game:GetService("Players").PutUsernameHere.Backpack.Emperor.Value = "1"
 end)

 ShootingSection:NewKeybind("Kaiser Impact: Beinschuss", "", Enum.KeyCode.NumLock, function()
    local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*40
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    game.Debris:AddItem(bodyVelocity, .1)
    wait(0.2)
    local TweenService = game:GetService("TweenService")
    local Players = game:GetService("Players")
    
    local speaker = Players.PutUsernameHere
    local plr = Players.PutUsernameHere
    local args = {
        [1] = 12830711336,
        [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    
        -- Rotate the character upside down slowly using a Tween after playing the animation
        local humanoidRootPart = pchar:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local targetCFrame = humanoidRootPart.CFrame * CFrame.Angles(math.rad(180), 0, 0)
            local tweenInfo = TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})
            
            -- Wait a short moment before starting the tween
            wait(0.1) -- Adjust this value as needed
            
            tween:Play()
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    -- Assuming this script is a LocalScript inside the character
    
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Function to handle jumping with increased JumpPower
    local function jumpWithIncreasedPower()
        if humanoid then
            -- Increase the JumpPower
            humanoid.JumpPower = 50 -- Adjust this value as needed
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            -- Reset JumpPower after jumping (optional)
            humanoid.JumpPower = 15 -- Default JumpPower value
        end
    end
    
    -- Call the function to make the character jump with increased power
    jumpWithIncreasedPower()
    wait(0.2)
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    
    -- Function to check if player is inside a specific box
    local function isInBox(boxName)
        local playerPos = player.Character and player.Character.HumanoidRootPart.Position
        if playerPos then
            local box = game.Workspace.Box:FindFirstChild(boxName)
            if box then
                local boxPosition = box.Position
                local boxSize = box.Size / 2 -- Get half the size of the box for accurate comparison
                return (playerPos.X >= boxPosition.X - boxSize.X and playerPos.X <= boxPosition.X + boxSize.X and
                        playerPos.Y >= boxPosition.Y - boxSize.Y and playerPos.Y <= boxPosition.Y + boxSize.Y and
                        playerPos.Z >= boxPosition.Z - boxSize.Z and playerPos.Z <= boxPosition.Z + boxSize.Z)
            end
        end
        return false
    end
    
    -- Check if player is inside Box1 or Box2
    if isInBox("Box1") or isInBox("Box2") then
        -- Get the position of the character's HumanoidRootPart
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local characterPosition = humanoidRootPart.Position
        
        -- Get the direction towards the cursor
        local direction = (mouse.Hit.p - characterPosition).unit
        
        -- Construct the arguments table with the direction as LookVector
        local args = {
            [1] = direction / 1.2,
            [2] = 222,
            [3] = false,
            [4] = false,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 0,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = true,
            [16] = false,
            [17] = false,
            [18] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    else
        -- Player is not inside Box1 or Box2, do nothing
    end    
    game:GetService("Players").PutUsernameHere.Backpack.Emperor.Value = "1"
     end)

     ShootingSection:NewKeybind("Dragon Drive: Turning Volley", "", Enum.KeyCode.NumLock, function()
        local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
        local plr = game.Players.PutUsernameHere
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Parent = HumanoidRootPart
        bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*55
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        game.Debris:AddItem(bodyVelocity, .1)
        wait(0.2)
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local TweenService = game:GetService("TweenService")
    local Players = game:GetService("Players")
    
    local speaker = Players.PutUsernameHere
    local plr = Players.PutUsernameHere
    local args = {
        [1] = 12830711336,
        [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    
        -- Rotate the character upside down slowly using a Tween after playing the animation
        local humanoidRootPart = pchar:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local targetCFrame = humanoidRootPart.CFrame * CFrame.Angles(math.rad(60), 1000, 0)
            local tweenInfo = TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})
            
            -- Wait a short moment before starting the tween
            wait(0) -- Adjust this value as needed
            
            tween:Play()
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    
    -- Get the position of the character's HumanoidRootPart
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local characterPosition = humanoidRootPart.Position
    
    -- Get the direction towards the cursor
    local direction = (mouse.Hit.p - characterPosition).unit
    
    -- Construct the arguments table with the direction as LookVector
            local args = {
                [1] = -direction/1.75,
                [2] = 141,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = false,
                [7] = false,
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = true,
                [17] = false,
                [18] = false
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Formless"):FireServer(unpack(args))
     end)

ShootingSection:NewKeybind("Lefty Drive Shot: Jumping Volley", "", Enum.KeyCode.NumLock, function()
local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13082657041,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
wait(0.6)
local player = game.Players.LocalPlayer

local function notify(title, message)
    print(title .. ': ' .. message)
end

local function refreshAnimations()
    local Char = player.Character or player.CharacterAdded:Wait()
    local Human = Char:WaitForChild('Humanoid', 15)
    local Animate = Char:WaitForChild('Animate', 15)
    
    if not Human or not Animate then
        notify('Refresh Animations', 'Failed to get Animate/Humanoid')
        return
    end
    
    Animate.Disabled = true
    for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
        v:Stop()
    end
    Animate.Disabled = false
    
    notify('Refresh Animations', 'Animations refreshed successfully')
end
refreshAnimations()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector*2.9,
        [2] = -100,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 20,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = true,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*2.9,
        [2] = 14,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 20,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
 end)
    

 ShootingSection:NewKeybind("Direct Line Drive: Acrobatic Volley", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13857940523,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*10
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    game.Debris:AddItem(bodyVelocity, .1)
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/35,
            [2] = -141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = false,
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = true,
            [17] = false,
            [18] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Formless"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
 end)

 ShootingSection:NewKeybind("Big Bang Drive: Super Goal", "A One In A Million Shot", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13857940523,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*60
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    game.Debris:AddItem(bodyVelocity, .1)
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.4 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/5,
        [2] = 80,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = true,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Formless"):FireServer(unpack(args))
 end)


 ShootingSection:NewKeybind("Ricotche Bullet Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13857940523,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector/1.2 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/1.5,
        [2] = 200,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = true,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Formless"):FireServer(unpack(args))
 end)

 local ShootingSection = Tab:NewSection("Feints")

 ShootingSection:NewKeybind("Feint", "Feints Shots And Dribble Moves", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer

    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
end)

 ShootingSection:NewKeybind("L 2 Stage Direct Shot Feint", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.4)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/4.1,
        [2] = 200,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = true,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/3,
        [2] = 100,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = true,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
 end)

 ShootingSection:NewKeybind("R 2 Stage Direct Shot Feint", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.1)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/4.1,
        [2] = 200,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = true,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/3,
        [2] = 100,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = true,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
 end)

 local ShootingSection = Tab:NewSection("Headers")

 ShootingSection:NewKeybind("Iron Heading: High Speed Header", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 15730260432,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Get the position of the character's HumanoidRootPart
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local characterPosition = humanoidRootPart.Position

-- Get the direction towards the cursor
local direction = (mouse.Hit.p - characterPosition).unit

-- Construct the arguments table with the direction as LookVector
local args = {
    [1] = direction * 1.4,  -- Updated to follow the cursor
    [2] = 0,
    [3] = 40,
    [4] = false,
    [5] = true
}

-- Fire the server event with the arguments
game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

 ShootingSection:NewKeybind("Iron Heading: Aerial Ricotche", "", Enum.KeyCode.NumLock, function()
    local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*55
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    game.Debris:AddItem(bodyVelocity, .1)

	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 15730260432,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
        local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.5 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*10,
        [2] = 0,
        [3] = 40,
        [4] = false,
        [5] = true,
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

 ShootingSection:NewKeybind("Iron Heading: Spatial  Bullet", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 15730260432,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.12,
            [2] = 0,
            [3] = 40,
            [4] = false,
            [5] = true,
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
end)

 local ShootingSection = Tab:NewSection("Backspin Kicks")

 ShootingSection:NewKeybind("Precision Threading Needle", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
            local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*1.25 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/9,
            [2] = 0,
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Gyro"):FireServer(unpack(args))
        
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
end)

 ShootingSection:NewKeybind("Gyro - Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
local player = game.Players.LocalPlayer
local box1 = game.Workspace.Box.Box1
local box2 = game.Workspace.Box.Box2
local sensorGoals = game.Workspace.SensorGoals

-- Function to aim at a target
local function aimAtTarget(target)
    -- Your aiming logic here, for example:
    player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
end

-- Function to fire a shot with specific arguments
local function fireShot()
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,  -- Placeholder, fill in with appropriate value if needed
        [2] = -141,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end

-- Check which box the player is in and aim accordingly
if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
    aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
else
    aimAtTarget(Workspace.SensorGoals.SensorGoal)
end

-- Fire the shot
fireShot()

wait(1)

    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
            local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector/3,
            [2] = 0,
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Gyro"):FireServer(unpack(args))
        
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
end)

ShootingSection:NewKeybind("SwordScrew: Piercing Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.4)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
local player = game.Players.LocalPlayer
local box1 = game.Workspace.Box.Box1
local box2 = game.Workspace.Box.Box2
local sensorGoals = game.Workspace.SensorGoals

-- Function to aim at a target
local function aimAtTarget(target)
    -- Your aiming logic here, for example:
    player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
end

-- Function to fire a shot with specific arguments
local function fireShot()
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector*1.2 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,  -- Placeholder, fill in with appropriate value if needed
        [2] = -141,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end

-- Check which box the player is in and aim accordingly
if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
    aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
else
    aimAtTarget(Workspace.SensorGoals.SensorGoal)
end

-- Fire the shot
fireShot()

wait(1)

    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
            local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*1.35 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/9,
            [2] = 0,
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Gyro"):FireServer(unpack(args))
        
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
end)

local ShootingSection = Tab:NewSection("Kick Techniques")

ShootingSection:NewKeybind("R Pinpoint High Speed Kick", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector +Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/3,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "left",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/2 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()    
end)

ShootingSection:NewKeybind("Pinpoint Accuracy Kick", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local duration = 2 -- Duration in seconds
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = game:GetService("Players").PutUsernameHere
        
        function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function calculatePower(holdDuration)
        local minPower = 150 -- Minimum power
        local maxPower = 250 -- Maximum power
        local maxHoldTime = .9 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(mousePosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit
    
        local args = {
            [1] = shootDirection + player.Character.HumanoidRootPart.CFrame.UpVector/17,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.LookVector/math.huge
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            rightClickStartTime = tick()
            refreshAnimations()
            wait(0.1)
            playAnimation(13082657041, 1)
        end
    end)
    
    local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            refreshAnimations()
            playAnimation(12830711336, 1)
            
            local mouse = player:GetMouse()
            local mousePosition = mouse.Hit.p
            local holdDuration = tick() - rightClickStartTime
            fireShot(mousePosition, holdDuration)
        end
    end)
    
    -- Schedule the script to stop after the duration
    delay(duration, function()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end)  
end)

ShootingSection:NewKeybind("L Pinpoint High Speed Kick", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector +Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/3,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "left",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/2 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()    
end)

ShootingSection:NewKeybind("L Spinning Mid-Range Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.6)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2.5,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "left",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/7 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/1.41
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()    
end)

ShootingSection:NewKeybind("R Spinning Mid-Range Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.6)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
        local args = {
            [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2.5,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "left",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/7 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/1.41
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(Workspace.SensorGoals:GetChildren()[2])
    else
        aimAtTarget(Workspace.SensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()    
end)

ShootingSection:NewKeybind("L Precise High Acceleration Kick", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.15)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector * 2 + player.Character.HumanoidRootPart.CFrame.UpVector / 5.5,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "left",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.RightVector / 2.4 * power + -player.Character.HumanoidRootPart.CFrame.LookVector * 1.5
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
    
end)

ShootingSection:NewKeybind("R Precise High Acceleration Kick", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.15)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector * 2 + player.Character.HumanoidRootPart.CFrame.UpVector / 5.5,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = player.Character.HumanoidRootPart.CFrame.RightVector / 2.4 * power + -player.Character.HumanoidRootPart.CFrame.LookVector * 1.5
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
    
end)

ShootingSection:NewKeybind("L Line Driven Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.12)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/3.5,
        [2] = 200,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "right",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*0.5 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(sensorGoals:GetChildren()[2])
    else
        aimAtTarget(sensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
end)

ShootingSection:NewKeybind("R Line Driven Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.12)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/3.5,
        [2] = 200,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*0.5 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        aimAtTarget(sensorGoals:GetChildren()[2])
    else
        aimAtTarget(sensorGoals.SensorGoal)
    end
    
    -- Fire the shot
    fireShot()
end)

ShootingSection:NewKeybind("R Perfect Parabolic Curve", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.35)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
     local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector + player.Character.HumanoidRootPart.CFrame.RightVector/1.7 +  player.Character.HumanoidRootPart.CFrame.UpVector/upVectorDampen,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.RightVector
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = 1
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 2.3
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()
end)

ShootingSection:NewKeybind("L Perfect Parabolic Curve", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.35)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
     local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector + player.Character.HumanoidRootPart.CFrame.RightVector/1.7 +  player.Character.HumanoidRootPart.CFrame.UpVector/upVectorDampen,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.RightVector
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = 1
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 2.3
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()
end)

ShootingSection:NewKeybind("L Pinpoint Riptiding Shot", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local duration = 4 -- Duration in seconds
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = game:GetService("Players").PutUsernameHere
        
        function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function calculatePower(holdDuration)
        local minPower = 100 -- Minimum power
        local maxPower = 141 -- Maximum power
        local maxHoldTime = .8 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(mousePosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit
    
        local args = {
            [1] = shootDirection + player.Character.HumanoidRootPart.CFrame.RightVector/1.2 + player.Character.HumanoidRootPart.CFrame.UpVector,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.RightVector*1.2
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            rightClickStartTime = tick()
            refreshAnimations()
            wait(0.1)
            playAnimation(13082657041, 1)
        end
    end)
    
    local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            refreshAnimations()
            playAnimation(12830711336, 1)
            
            local mouse = player:GetMouse()
            local mousePosition = mouse.Hit.p
            local holdDuration = tick() - rightClickStartTime
            fireShot(mousePosition, holdDuration)
        end
    end)
    
    -- Schedule the script to stop after the duration
    delay(duration, function()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end)
    
end)

ShootingSection:NewKeybind("R Pinpoint Riptiding Shot", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local duration = 4 -- Duration in seconds
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = game:GetService("Players").PutUsernameHere
        
        function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function calculatePower(holdDuration)
        local minPower = 100 -- Minimum power
        local maxPower = 141 -- Maximum power
        local maxHoldTime = .8 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(mousePosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit
    
        local args = {
            [1] = shootDirection + -player.Character.HumanoidRootPart.CFrame.RightVector/1.2 + player.Character.HumanoidRootPart.CFrame.UpVector,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = player.Character.HumanoidRootPart.CFrame.RightVector*1.2
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            rightClickStartTime = tick()
            refreshAnimations()
            wait(0.1)
            playAnimation(13082657041, 1)
        end
    end)
    
    local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            refreshAnimations()
            playAnimation(12830711336, 1)
            
            local mouse = player:GetMouse()
            local mousePosition = mouse.Hit.p
            local holdDuration = tick() - rightClickStartTime
            fireShot(mousePosition, holdDuration)
        end
    end)
    
    -- Schedule the script to stop after the duration
    delay(duration, function()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end)
    
end)

ShootingSection:NewKeybind("(L) Inside Spinning Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
     local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector + -player.Character.HumanoidRootPart.CFrame.RightVector*1.2 +  player.Character.HumanoidRootPart.CFrame.UpVector/upVectorDampen,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = player.Character.HumanoidRootPart.CFrame.RightVector*1.7
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = .9
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 1.13
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()
end)

ShootingSection:NewKeybind("(R) Outside Spinning Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.3)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
     local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector + -player.Character.HumanoidRootPart.CFrame.RightVector*1.2 +  player.Character.HumanoidRootPart.CFrame.UpVector/upVectorDampen,
            [2] = 141,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = player.Character.HumanoidRootPart.CFrame.RightVector*1.7
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = .9
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 1.13
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()
end)

ShootingSection:NewKeybind("(L) High Speed Vertical Spinning Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.6)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
     local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector*1.4 + player.Character.HumanoidRootPart.CFrame.RightVector*1.6 +  player.Character.HumanoidRootPart.CFrame.UpVector/upVectorDampen,
            [2] = 150,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.RightVector*2.36 + -player.Character.HumanoidRootPart.CFrame.LookVector/6
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = .9
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 3
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()
end)

ShootingSection:NewKeybind("(R) High Speed Vertical Spinning Shot", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.6)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Function to check if the player is inside a box
    local function isInBox(box)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local boxPos = box.Position
            local boxSize = box.Size
            return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                   pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                   pos.Z > boxPos.Z - boxSize.Z/.8 and pos.Z < boxPos.Z + boxSize.Z/.8
        end
        return false
    end
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(hrp.Position, target.Position)
        end
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(upVectorDampen)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
     local player = game.Players.LocalPlayer
    local box1 = game.Workspace.Box.Box1
    local box2 = game.Workspace.Box.Box2
    local sensorGoals = game.Workspace.SensorGoals
    
    -- Function to aim at a target
    local function aimAtTarget(target)
        -- Your aiming logic here, for example:
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, target.Position)
    end
    
    -- Function to calculate power based on distance
    local function calculatePower(targetPosition)
        local distance = (player.Character.HumanoidRootPart.Position - targetPosition).magnitude
        local maxDistance = 100 -- Maximum distance you want to consider
        local minPower = 1.5 -- Minimum power
        local maxPower = 5 -- Maximum power
    
        -- Clamp the distance to the maximum distance
        distance = math.min(distance, maxDistance)
    
        -- Calculate the power based on the distance
        local power = maxPower - ((distance / maxDistance) * (maxPower - minPower))
        return power
    end
    
    -- Function to fire a shot with specific arguments
    local function fireShot(target)
        local power = calculatePower(target.Position)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector*1.4 + -player.Character.HumanoidRootPart.CFrame.RightVector*1.6 +  player.Character.HumanoidRootPart.CFrame.UpVector/upVectorDampen,
            [2] = 150,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = player.Character.HumanoidRootPart.CFrame.RightVector*2.36 + -player.Character.HumanoidRootPart.CFrame.LookVector/6
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    -- Check which box the player is in and aim accordingly
    local target
    if (player.Character.HumanoidRootPart.Position - box1.Position).magnitude < (player.Character.HumanoidRootPart.Position - box2.Position).magnitude then
        target = Workspace.SensorGoals:GetChildren()[2]
    else
        target = Workspace.SensorGoals.SensorGoal
    end
    
    aimAtTarget(target)
    
    -- Fire the shot
    fireShot(target)
        end
    end
    
    -- Main logic to check the box and aim/fire
    local function main()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
    
        local upVectorDampen = .9
        if isInBox(box1) or isInBox(box2) then
            upVectorDampen = 3
        end
    
        -- Aim at the targets
        if (hrp.Position - box1.Position).magnitude < (hrp.Position - box2.Position).magnitude then
            aimAtTarget(sensorGoals:GetChildren()[2])
        else
            aimAtTarget(sensorGoals.SensorGoal)
        end
    
        -- Fire the shot
        fireShot(upVectorDampen)
    end
    
    -- Run the main function
    main()
end)
local Tab = Window:NewTab("Passes")
local PassingSection = Tab:NewSection("Auto Tracking Passes")

PassingSection:NewKeybind("Auto-Tracking Lob Pass", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13082657041,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
wait(0.1)
local player = game.Players.LocalPlayer

local function notify(title, message)
    print(title .. ': ' .. message)
end

local function refreshAnimations()
    local Char = player.Character or player.CharacterAdded:Wait()
    local Human = Char:WaitForChild('Humanoid', 15)
    local Animate = Char:WaitForChild('Animate', 15)
    
    if not Human or not Animate then
        notify('Refresh Animations', 'Failed to get Animate/Humanoid')
        return
    end
    
    Animate.Disabled = true
    for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
        v:Stop()
    end
    Animate.Disabled = false
    
    notify('Refresh Animations', 'Animations refreshed successfully')
end
refreshAnimations()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find the closest player on the same team
local function findClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge -- Set to a very large number

    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Team == player.Team and otherPlayer.Character then
            local otherHumanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHumanoidRootPart then
                local distance = (humanoidRootPart.Position - otherHumanoidRootPart.Position).magnitude
                if distance < shortestDistance then
                    closestPlayer = otherPlayer
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer, shortestDistance
end

-- Function to calculate power based on distance
local function calculatePower(distance)
    -- Adjust this formula based on your game's mechanics
    local minPower = 100
    local maxPower = 200
    local maxDistance = 100

    -- Linear mapping of distance to power
    local power = (distance / maxDistance) * (maxPower - minPower) + minPower
    return math.clamp(power, minPower, maxPower)
end

-- Function to aim at the closest player's head
local function aimAtClosestPlayer()
    local closestPlayer, distance = findClosestPlayer()
    if closestPlayer and closestPlayer.Character then
        local closestHead = closestPlayer.Character:FindFirstChild("Head")
        if closestHead then
            local direction = (closestHead.Position - humanoidRootPart.Position).unit
            humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, closestHead.Position)

            local power = calculatePower(distance)

            -- Update the arguments with the new direction and power
            local args = {
                [1] = humanoidRootPart.CFrame.LookVector / 2 + humanoidRootPart.CFrame.UpVector / 2,
                [2] = power,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = false,
                [7] = false,
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false
            }
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
end

-- Run the aim function
aimAtClosestPlayer()
end)

PassingSection:NewKeybind("Auto-Tracking Grasscutter Pass", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13082657041,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
wait(0.2)
local player = game.Players.LocalPlayer

local function notify(title, message)
    print(title .. ': ' .. message)
end

local function refreshAnimations()
    local Char = player.Character or player.CharacterAdded:Wait()
    local Human = Char:WaitForChild('Humanoid', 15)
    local Animate = Char:WaitForChild('Animate', 15)
    
    if not Human or not Animate then
        notify('Refresh Animations', 'Failed to get Animate/Humanoid')
        return
    end
    
    Animate.Disabled = true
    for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
        v:Stop()
    end
    Animate.Disabled = false
    
    notify('Refresh Animations', 'Animations refreshed successfully')
end
refreshAnimations()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find the closest player on the same team
local function findClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge -- Set to a very large number

    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Team == player.Team and otherPlayer.Character then
            local otherHumanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHumanoidRootPart then
                local distance = (humanoidRootPart.Position - otherHumanoidRootPart.Position).magnitude
                if distance < shortestDistance then
                    closestPlayer = otherPlayer
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer, shortestDistance
end

-- Function to calculate power based on distance
local function calculatePower(distance)
    -- Adjust this formula based on your game's mechanics
    local minPower = 100
    local maxPower = 200
    local maxDistance = 100

    -- Linear mapping of distance to power
    local power = (distance / maxDistance) * (maxPower - minPower) + minPower
    return math.clamp(power, minPower, maxPower)
end

-- Function to aim at the closest player's head
local function aimAtClosestPlayer()
    local closestPlayer, distance = findClosestPlayer()
    if closestPlayer and closestPlayer.Character then
        local closestHead = closestPlayer.Character:FindFirstChild("Head")
        if closestHead then
            local direction = (closestHead.Position - humanoidRootPart.Position).unit
            humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, closestHead.Position)

            local power = calculatePower(distance)

            -- Update the arguments with the new direction and power
            local args = {
                [1] = humanoidRootPart.CFrame.LookVector,
                [2] = power,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = false,
                [7] = false,
                [9] = false,
                [10] = Color3.new(
                    Workspace.PutUsernameHere.AuraColour.Red.Value,
                    Workspace.PutUsernameHere.AuraColour.Green.Value,
                    Workspace.PutUsernameHere.AuraColour.Blue.Value
                ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false
            }
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
end

-- Run the aim function
aimAtClosestPlayer()
end)


local PassingSection = Tab:NewSection("BackSpin Passes")

PassingSection:NewKeybind("L Accurate Riptiding Pass", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local duration = 4 -- Duration in seconds
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = game:GetService("Players").PutUsernameHere
        
        function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function aimAtTarget(targetPosition)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, targetPosition)
    end
    
    local function calculatePower(holdDuration)
        local minPower = 100 -- Minimum power
        local maxPower = 161 -- Maximum power
        local maxHoldTime = 1 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(targetPosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector + player.Character.HumanoidRootPart.CFrame.RightVector/1.5 + player.Character.HumanoidRootPart.CFrame.UpVector,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = -player.Character.HumanoidRootPart.CFrame.RightVector
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            rightClickStartTime = tick()
            refreshAnimations()
            wait(0.1)
            playAnimation(13082657041, 1)
        end
    end)
    
    local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            refreshAnimations()
            playAnimation(12830711336, 1)
            
            local closestPlayer = nil
            local shortestDistance = math.huge
    
            for _, plr in ipairs(game.Players:GetPlayers()) do
                if plr ~= player and plr.Team == player.Team then  -- Check if player is on the same team
                    local character = plr.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local headPosition = character.HumanoidRootPart.Position + Vector3.new(0, character.HumanoidRootPart.Size.Y / 2, 0)
                        local distance = (player.Character.HumanoidRootPart.Position - headPosition).magnitude
                        if distance < shortestDistance then
                            closestPlayer = headPosition
                            shortestDistance = distance
                        end
                    end
                end
            end
            
            if closestPlayer then
                aimAtTarget(closestPlayer)
                local holdDuration = tick() - rightClickStartTime
                fireShot(closestPlayer, holdDuration)
            end
        end
    end)
    
    -- Schedule the script to stop after the duration
    delay(duration, function()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end)         
end)

PassingSection:NewKeybind("R Accurate Riptiding Pass", "", Enum.KeyCode.NumLock, function()
    local player = game.Players.LocalPlayer
    local UserInputService = game:GetService("UserInputService")
    local duration = 4 -- Duration in seconds
    local startTime = tick()
    local rightClickStartTime
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    
    local function playAnimation(animationId, speed)
        local speaker = game:GetService("Players").PutUsernameHere
        
        function r15(plr)
            if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                return true
            end
        end
        
        if not r15(speaker) then
            local pchar = speaker.Character
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
            local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
            k:Play()
            if speed then
                k:AdjustSpeed(tonumber(speed))
            end
        else
            notify('R6 Required', 'This command requires the r6 rig type')
        end
    end
    
    local function aimAtTarget(targetPosition)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, targetPosition)
    end
    
    local function calculatePower(holdDuration)
        local minPower = 100 -- Minimum power
        local maxPower = 161 -- Maximum power
        local maxHoldTime = 1 -- Maximum hold time in seconds
    
        holdDuration = math.min(holdDuration, maxHoldTime)
        local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
        return power
    end
    
    local function fireShot(targetPosition, holdDuration)
        local power = calculatePower(holdDuration)
    
        local args = {
            [1] = player.Character.HumanoidRootPart.CFrame.LookVector + -player.Character.HumanoidRootPart.CFrame.RightVector/1.5 + player.Character.HumanoidRootPart.CFrame.UpVector,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "right",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = player.Character.HumanoidRootPart.CFrame.RightVector
        }
    
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end
    
    local function checkDuration()
        if tick() - startTime > duration then
            if inputBeganConnection then inputBeganConnection:Disconnect() end
            if inputEndedConnection then inputEndedConnection:Disconnect() end
            notify("Script", "Script duration ended.")
        end
    end
    
    local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            rightClickStartTime = tick()
            refreshAnimations()
            wait(0.1)
            playAnimation(13082657041, 1)
        end
    end)
    
    local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        checkDuration()
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            refreshAnimations()
            playAnimation(12830711336, 1)
            
            local closestPlayer = nil
            local shortestDistance = math.huge
    
            for _, plr in ipairs(game.Players:GetPlayers()) do
                if plr ~= player and plr.Team == player.Team then  -- Check if player is on the same team
                    local character = plr.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local headPosition = character.HumanoidRootPart.Position + Vector3.new(0, character.HumanoidRootPart.Size.Y / 2, 0)
                        local distance = (player.Character.HumanoidRootPart.Position - headPosition).magnitude
                        if distance < shortestDistance then
                            closestPlayer = headPosition
                            shortestDistance = distance
                        end
                    end
                end
            end
            
            if closestPlayer then
                aimAtTarget(closestPlayer)
                local holdDuration = tick() - rightClickStartTime
                fireShot(closestPlayer, holdDuration)
            end
        end
    end)
    
    -- Schedule the script to stop after the duration
    delay(duration, function()
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end)         
end)

PassingSection:NewKeybind("Perfect Snping Pass", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.25)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local closestPlayer
    local minDistance = math.huge
    
    -- Find the closest player
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherHumanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHumanoidRootPart then
                local distance = (humanoidRootPart.Position - otherHumanoidRootPart.Position).Magnitude
                if distance < minDistance then
                    closestPlayer = otherPlayer
                    minDistance = distance
                end
            end
        end
    end
    
    if closestPlayer then
        local targetHumanoidRootPart = closestPlayer.Character:FindFirstChild("HumanoidRootPart")
        
        -- Calculate aim direction
        local aimDirection = (targetHumanoidRootPart.Position - humanoidRootPart.Position).unit
        local distance = (targetHumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
    
        -- Adjust power based on distance (example scaling: closer = more power)
        local maxPower = 100
        local minPower = 60
        local power = minPower + (maxPower - minPower) * (distance / 100)  -- Adjust the denominator for scaling
        
        local args = {
            [1] = aimDirection + humanoidRootPart.CFrame.UpVector / 9,
            [2] = power,
            [3] = false,
            [4] = true,
            [5] = false,
            [6] = false,
            [7] = true,
            [8] = "left",
            [9] = false,
            [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
            [11] = 40,
            [12] = false,
            [13] = false,
            [14] = false,
            [15] = false,
            [16] = false,
            [17] = false,
            [18] = false,
            [20] = false,
            [21] = humanoidRootPart.CFrame.UpVector / 1.4
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    end       
end)

PassingSection:NewKeybind("L Precise-Driven Through-Ball", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.25)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer

    local function getClosestPlayer()
        local closestPlayer = nil
        local shortestDistance = math.huge
        
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Team == player.Team and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
                local distance = (otherPlayer.Character.Head.Position - player.Character.Head.Position).magnitude
                if distance < shortestDistance then
                    closestPlayer = otherPlayer
                    shortestDistance = distance
                end
            end
        end
        
        return closestPlayer, shortestDistance
    end
    
    local function aimAtClosestPlayerHead()
        local closestPlayer, distance = getClosestPlayer()
        
        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
            local targetPosition = closestPlayer.Character.Head.Position
            local playerPosition = player.Character.HumanoidRootPart.Position
            local lookAtDirection = (targetPosition - playerPosition).unit
            local upVector = Vector3.new(0, distance / 300, 0) -- Scale up vector based on distance
            
            -- Scale RightVector based on distance
            local scaledRightVector = -player.Character.HumanoidRootPart.CFrame.RightVector * (distance / 400)
            
            local args = {
                [1] = CFrame.new(playerPosition, targetPosition).LookVector + upVector,
                [2] = 141,
                [3] = false,
                [4] = false,
                [5] = false,
                [6] = false,
                [7] = true,
                [8] = "right",
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false,
                [20] = false,
                [21] = scaledRightVector
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
    
    -- Automatically aim at the closest player's head when this script runs
    aimAtClosestPlayerHead()    
end)

PassingSection:NewKeybind("R Precise-Driven Through-Ball", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.25)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local player = game.Players.LocalPlayer

    local function getClosestPlayer()
        local closestPlayer = nil
        local shortestDistance = math.huge
        
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Team == player.Team and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
                local distance = (otherPlayer.Character.Head.Position - player.Character.Head.Position).magnitude
                if distance < shortestDistance then
                    closestPlayer = otherPlayer
                    shortestDistance = distance
                end
            end
        end
        
        return closestPlayer, shortestDistance
    end
    
    local function aimAtClosestPlayerHead()
        local closestPlayer, distance = getClosestPlayer()
        
        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
            local targetPosition = closestPlayer.Character.Head.Position
            local playerPosition = player.Character.HumanoidRootPart.Position
            local lookAtDirection = (targetPosition - playerPosition).unit
            local upVector = Vector3.new(0, distance / 300, 0) -- Scale up vector based on distance
            
            -- Scale RightVector based on distance
            local scaledRightVector = player.Character.HumanoidRootPart.CFrame.RightVector * (distance / 400)
            
            local args = {
                [1] = CFrame.new(playerPosition, targetPosition).LookVector + upVector,
                [2] = 141,
                [3] = false,
                [4] = false,
                [5] = false,
                [6] = false,
                [7] = true,
                [8] = "right",
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false,
                [20] = false,
                [21] = scaledRightVector
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
    
    -- Automatically aim at the closest player's head when this script runs
    aimAtClosestPlayerHead()
    
end)

PassingSection:NewKeybind("Perfect Grascutting Breakthrough", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.32)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local function getClosestPlayer()
        local players = game:GetService("Players")
        local localPlayer = players.LocalPlayer
        local localCharacter = localPlayer.Character
        local localHRP = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
        local closestPlayer = nil
        local shortestDistance = math.huge
        local closestRightVector = nil
    
        if localHRP then
            for _, player in ipairs(players:GetPlayers()) do
                if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    if player.Team == localPlayer.Team then  -- Check if the player is on the same team
                        local targetHRP = player.Character.HumanoidRootPart
                        local distance = (targetHRP.Position - localHRP.Position).magnitude
                        if distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                            closestRightVector = targetHRP.CFrame.RightVector / 1.75
                        end
                    end
                end
            end
        end
    
        return closestPlayer, closestRightVector
    end
    
    local function getAimAndPower(target)
        local localPlayer = game:GetService("Players").LocalPlayer
        local localCharacter = localPlayer.Character
        local localHRP = localCharacter:FindFirstChild("HumanoidRootPart")
        local targetHRP = target.Character:FindFirstChild("HumanoidRootPart")
        local targetHead = target.Character:FindFirstChild("Head")
        
        if localHRP and targetHRP and targetHead then
            local aimDirection = (targetHead.Position - localHRP.Position).unit
            local distance = (targetHead.Position - localHRP.Position).magnitude
            local power = distance * 1.5 -- Adjust power multiplier as needed
    
            return aimDirection, power
        end
        
        return nil, nil
    end
    
    local targetPlayer, rightVector = getClosestPlayer()
    if targetPlayer then
        local aimDirection, power = getAimAndPower(targetPlayer)
        if aimDirection and power then
            local args = {
                [1] = aimDirection,
                [2] = power,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = false,
                [7] = true,
                [8] = "left",
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false,
                [20] = false,
                [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
    
end)

PassingSection:NewKeybind("Pinpoint Lob Pass", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13082657041,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    wait(0.42)
    local player = game.Players.LocalPlayer
    
    local function notify(title, message)
        print(title .. ': ' .. message)
    end
    
    local function refreshAnimations()
        local Char = player.Character or player.CharacterAdded:Wait()
        local Human = Char:WaitForChild('Humanoid', 15)
        local Animate = Char:WaitForChild('Animate', 15)
        
        if not Human or not Animate then
            notify('Refresh Animations', 'Failed to get Animate/Humanoid')
            return
        end
        
        Animate.Disabled = true
        for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
            v:Stop()
        end
        Animate.Disabled = false
        
        notify('Refresh Animations', 'Animations refreshed successfully')
    end
    refreshAnimations()
        local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 12830711336,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local function getClosestPlayer()
        local players = game:GetService("Players")
        local localPlayer = players.LocalPlayer
        local localCharacter = localPlayer.Character
        local localHRP = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
        local closestPlayer = nil
        local shortestDistance = math.huge
        local closestRightVector = nil
    
        if localHRP then
            for _, player in ipairs(players:GetPlayers()) do
                if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    if player.Team == localPlayer.Team then  -- Check if the player is on the same team
                        local targetHRP = player.Character.HumanoidRootPart
                        local distance = (targetHRP.Position - localHRP.Position).magnitude
                        if distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                            closestRightVector = targetHRP.CFrame.RightVector / 1.75
                        end
                    end
                end
            end
        end
    
        return closestPlayer, closestRightVector
    end
    
    local function getAimAndPower(target)
        local localPlayer = game:GetService("Players").LocalPlayer
        local localCharacter = localPlayer.Character
        local localHRP = localCharacter:FindFirstChild("HumanoidRootPart")
        local targetHRP = target.Character:FindFirstChild("HumanoidRootPart")
        local targetHead = target.Character:FindFirstChild("Head")
        
        if localHRP and targetHRP and targetHead then
            local aimDirection = (targetHead.Position - localHRP.Position).unit
            local distance = (targetHead.Position - localHRP.Position).magnitude
            local power = distance * 1.5 -- Adjust power multiplier as needed
    
            return aimDirection, power
        end
        
        return nil, nil
    end
    
    local targetPlayer, rightVector = getClosestPlayer()
    if targetPlayer then
        local aimDirection, power = getAimAndPower(targetPlayer)
        if aimDirection and power then
            local args = {
                [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/1.75,
                [2] = power,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = false,
                [7] = true,
                [8] = "left",
                [9] = false,
                [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false,
                [20] = false,
                [21] = aimDirection
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
        end
    end
    
end)

local PassingSection = Tab:NewSection("Long  Passes")

PassingSection:NewKeybind("R Left Gliding Long Pass", "", Enum.KeyCode.NumLock, function()
    wait(0.6)
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector,
        [2] = 172,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*1.4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
    local args = {
        [1] = Vector3.new(0,0,0),
        [2] = 192,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
    
    local args = {
        [1] = Vector3.new(0,0,0),
        [2] = 192,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector*1.1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
    
        local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
        local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = -70,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

local PassingSection = Tab:NewSection("Short Passes")

PassingSection:NewKeybind("High Speed GrassCutting Pass", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 415,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

PassingSection:NewKeybind("L Curling GrassCutting Pass", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 415,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

PassingSection:NewKeybind("R Curling GrassCutting Pass", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 415,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

PassingSection:NewKeybind("L Lob Pass", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 111,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
end)

PassingSection:NewKeybind("R Lob Pass", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 111,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
end)

PassingSection:NewKeybind("L Golden Snipe", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 111,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
end)

PassingSection:NewKeybind("R Golden Snipe", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 111,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector,
        [2] = 110,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "left",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
end)

local Tab = Window:NewTab("Defensive")
local DefenseSection = Tab:NewSection("Semi-Blatant")

DefenseSection:NewKeybind("Auto-Tracking Clear Pass", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13392854857,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
local plr = game.Players.PutUsernameHere
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.Parent = HumanoidRootPart
bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*70
bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
game.Debris:AddItem(bodyVelocity, .1)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find the closest player
local function findClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge -- Set to a very large number

    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherHumanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHumanoidRootPart then
                local distance = (humanoidRootPart.Position - otherHumanoidRootPart.Position).magnitude
                if distance < shortestDistance then
                    closestPlayer = otherPlayer
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer, shortestDistance
end

-- Function to calculate power based on distance
local function calculatePower(distance)
    -- Adjust this formula based on your game's mechanics
    local minPower = 70
    local maxPower = 150
    local maxDistance = 200

    -- Linear mapping of distance to power
    local power = (distance / maxDistance) * (maxPower - minPower) + minPower
    return math.clamp(power, minPower, maxPower)
end

-- Function to aim at the closest player's head
local function aimAtClosestPlayer()
    local closestPlayer, distance = findClosestPlayer()
    if closestPlayer and closestPlayer.Character then
        local closestHead = closestPlayer.Character:FindFirstChild("Head")
        if closestHead then
            local direction = (closestHead.Position - humanoidRootPart.Position).unit
            humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, closestHead.Position)

            local power = calculatePower(distance)

            -- Update the arguments with the new direction and power
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector,
        [2] = power,
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Serpent"):FireServer(unpack(args))
        end
    end
end

-- Run the aim function
aimAtClosestPlayer()
end)

DefenseSection:NewKeybind("Serpent Aerial Trap", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
    local plr = game:GetService("Players").PutUsernameHere
    local args = {
       [1] = 13392854857,
       [2] = 1,
    }
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = tostring(args[1])
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if args[2] then
            k:AdjustSpeed(tostring(args[2]))
        end
    else
        notify('R6 Required','This command requires the r6 rig type')
    end
    local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*70
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    game.Debris:AddItem(bodyVelocity, .1)
         local args = {
            [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*15,
            [2] = 5,
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Serpent"):FireServer(unpack(args))
end)

DefenseSection:NewKeybind("Heading Clear", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13392854857,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Get the position of the character's HumanoidRootPart
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local characterPosition = humanoidRootPart.Position

-- Get the direction towards the cursor
local direction = (mouse.Hit.p - characterPosition).unit

-- Construct the arguments table with the direction as LookVector
local args = {
    [1] = direction * 1.3,  -- Updated to follow the cursor
    [2] = 0,
    [3] = 40,
    [4] = true
}

-- Fire the server event with the arguments
game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

DefenseSection:NewKeybind("Aerial Serpent Clear", "", Enum.KeyCode.NumLock, function()
    local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13392854857,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
local plr = game.Players.PutUsernameHere
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.Parent = HumanoidRootPart
bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*68
bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
game.Debris:AddItem(bodyVelocity, .1)
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*2.5 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 60,
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Serpent"):FireServer(unpack(args))
    wait(0.2)
    local player = game.Players.PutUsernameHere
local weaponcd = player.PlayerGui.GeneralGUI.cooldowns.Weaponcd
local textLabel = weaponcd.TextLabel
local weaponKeybind = player.PlayerGui.GeneralGUI.cooldowns.WeaponKeybind
local weaponTextLabel = player.PlayerGui.GeneralGUI.cooldowns.Weapon.TextLabel
local weapon = player.PlayerGui.GeneralGUI.cooldowns.Weapon

local countdownTime = 95.0
local updateInterval = 0.1 -- Update every 0.1 seconds (100 milliseconds)
local originalColor = Color3.fromRGB(73, 152, 255)

-- Make Weaponcd GUI visible
weaponcd.Visible = true

-- Make WeaponKeybind and Weapon TextLabel GUIs invisible
weaponKeybind.Visible = false
weaponTextLabel.Visible = false

-- Change the color of Weapon to match Weaponcd
weapon.BackgroundColor3 = weaponcd.BackgroundColor3

textLabel.Visible = true
textLabel.Text = string.format("(%.1f)/s", countdownTime)

while countdownTime > 0 do
    wait(updateInterval)
    countdownTime = countdownTime - updateInterval
    textLabel.Text = string.format("(%.1f)/s", countdownTime)
end

-- After the countdown, update the visibility of the GUIs and revert the color of Weapon
textLabel.Visible = false
weaponcd.Visible = false
weaponKeybind.Visible = true
weaponTextLabel.Visible = true
weapon.BackgroundColor3 = originalColor
end)

DefenseSection:NewKeybind("Serpent Lift", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13392854857,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
local plr = game.Players.PutUsernameHere
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.Parent = HumanoidRootPart
bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*49
bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
game.Debris:AddItem(bodyVelocity, .1)
local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2,
    [2] = 0,
}

game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Serpent"):FireServer(unpack(args))
end)

DefenseSection:NewKeybind("Tackle Trap", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Vector3.new(1,1,1),
        [2] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Tackle"):FireServer(unpack(args))
    
end)

DefenseSection:NewKeybind("Aerial Tackle", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Vector3.new(0,1,0),
        [2] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Tackle"):FireServer(unpack(args))
    
end)

DefenseSection:NewKeybind("Tackle Rubble", "", Enum.KeyCode.NumLock, function()
    game:GetService("ReplicatedStorage"):WaitForChild("TackleFlag"):FireServer()

end)

local Tab = Window:NewTab("Flow")
local FlowSection = Tab:NewSection("Flow Attributes")

FlowSection:NewButton("0 Flow", "", function()
game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 0
end)

FlowSection:NewButton("100 Flow", "", function()
game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 100
end)

FlowSection:NewButton("0 Flow (LOOP)", "", function()
    while wait() do game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 0 end
end)

FlowSection:NewButton("100 Flow (LOOP)", "", function()
    while wait() do game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 100 end
end)

FlowSection:NewButton("Inf Flow", "", function()
    game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = math.huge
    end)

local FlowSection = Tab:NewSection("Modes")

FlowSection:NewKeybind("PuppetMaster", "", Enum.KeyCode.NumLock, function()
    game:GetService("ReplicatedStorage"):WaitForChild("FlowTypes"):WaitForChild("Handle"):WaitForChild("BuffRemote"):FireServer()
    local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local ball = game.Workspace.BallFolder.Ball
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local ball = game.Workspace.BallFolder.Ball
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local maxWalkSpeed = 40 -- Maximum walk speed
local minWalkSpeed = 33 -- Minimum walk speed (default speed)
local maxDistance = 100 -- Maximum distance to scale speed

local shiftHeld = false
local startTime = tick()  -- Record the start time

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        shiftHeld = true
    end
end)

userInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        shiftHeld = false
        humanoid.WalkSpeed = minWalkSpeed -- Reset to default speed when shift is released
    end
end)

local function updateSpeed()
    local currentTime = tick()
    local elapsedTime = currentTime - startTime
    
    if elapsedTime >= 60 then
        -- Reset walk speed and disable the script after 60 seconds
        humanoid.WalkSpeed = minWalkSpeed
        runService:UnbindFromRenderStep("AdjustWalkSpeed")
        return
    end
    
    if shiftHeld then
        local characterPosition = character.PrimaryPart.Position
        local ballPosition = ball.Position
        local distance = (characterPosition - ballPosition).Magnitude

        -- Calculate the walk speed based on the distance
        local speedMultiplier = math.clamp(distance / maxDistance, 0, 1)
        local newWalkSpeed = minWalkSpeed

        -- Apply the new walk speed to the humanoid
        humanoid.WalkSpeed = newWalkSpeed
    end
end

runService.RenderStepped:Connect(updateSpeed)
    local ball = workspace.BallFolder.Ball
local shadow = Instance.new("Part")
shadow.Name = "Shadow"
shadow.Size = Vector3.new(15, 2, 15)
shadow.Anchored = true
shadow.CanCollide = false
shadow.Material = Enum.Material.SmoothPlastic
shadow.BrickColor = BrickColor.new("Black")
shadow.Transparency = 0.5
shadow.Parent = workspace

local RunService = game:GetService("RunService")
local startTime = tick()  -- Get the initial time in seconds

local function updateShadowPosition()
    if tick() - startTime > 60 then  -- Check if 60 seconds have passed
        RunService:UnbindFromRenderStep("UpdateShadow")
        shadow:Destroy()  -- Destroy the shadow part
        return
    end
    
    -- Get the normalized direction in which the ball is moving
    local direction = ball.CFrame.LookVector
    
    -- Calculate the time it takes to reach the ground (Y = 0)
    local initialHeight = ball.Position.Y
    local timeToGround = math.sqrt(2 * initialHeight / workspace.Gravity)

    -- Predict the landing position based on current direction
    local predictedPosition = ball.Position + direction * timeToGround * ball.Velocity.Magnitude
    
    -- Set the shadow's position to the exact predicted landing point
    shadow.Position = Vector3.new(predictedPosition.X, 0.1, predictedPosition.Z)
end

-- Update the shadow position on every frame until 60 seconds have passed
RunService.RenderStepped:Connect(updateShadowPosition)

local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local duration = 60 -- Duration in seconds
local startTime = tick()
local rightClickStartTime

local function notify(title, message)
    print(title .. ': ' .. message)
end

local function refreshAnimations()
    local Char = player.Character or player.CharacterAdded:Wait()
    local Human = Char:WaitForChild('Humanoid', 15)
    local Animate = Char:WaitForChild('Animate', 15)
    
    if not Human or not Animate then
        notify('Refresh Animations', 'Failed to get Animate/Humanoid')
        return
    end
    
    Animate.Disabled = true
    for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
        v:Stop()
    end
    Animate.Disabled = false
    
    notify('Refresh Animations', 'Animations refreshed successfully')
end

local function playAnimation(animationId, speed)
    local speaker = game:GetService("Players").PutUsernameHere
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if speed then
            k:AdjustSpeed(tonumber(speed))
        end
    else
        notify('R6 Required', 'This command requires the r6 rig type')
    end
end

local function calculatePower(holdDuration)
    local minPower = 140 -- Minimum power
    local maxPower = 200 -- Maximum power
    local maxHoldTime = 1 -- Maximum hold time in seconds

    holdDuration = math.min(holdDuration, maxHoldTime)
    local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
    return power
end

local function fireShot(mousePosition, holdDuration)
    local power = calculatePower(holdDuration)

    local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit

    local args = {
        [1] = shootDirection + player.Character.HumanoidRootPart.CFrame.UpVector/15,
        [2] = power,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }

    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end

local function checkDuration()
    if tick() - startTime > duration then
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end
end

local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
    checkDuration()
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        rightClickStartTime = tick()
        refreshAnimations()
        wait(0.1)
        playAnimation(13082657041, 1)
    end
end)

local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
    checkDuration()
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        refreshAnimations()
        playAnimation(12830711336, 1)
        
        local mouse = player:GetMouse()
        local mousePosition = mouse.Hit.p
        local holdDuration = tick() - rightClickStartTime
        fireShot(mousePosition, holdDuration)
    end
end)

-- Schedule the script to stop after the duration
delay(duration, function()
    if inputBeganConnection then inputBeganConnection:Disconnect() end
    if inputEndedConnection then inputEndedConnection:Disconnect() end
    notify("Script", "Script duration ended.")
end)
    game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 0
    end)

FlowSection:NewKeybind("Extreme Spatial Awareness", "", Enum.KeyCode.NumLock, function()
    game:GetService("ReplicatedStorage"):WaitForChild("FlowTypes"):WaitForChild("Handle"):WaitForChild("BuffRemote"):FireServer()
    local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local camera = game.Workspace.CurrentCamera

local box1 = game.Workspace.Box.Box1
local box2 = game.Workspace.Box.Box2
local sensorGoal1 = game.Workspace.SensorGoals:GetChildren()[2]
local sensorGoal2 = game.Workspace.SensorGoals.SensorGoal

local isEnabled = true -- Variable to check if the script is enabled

local function isCharacterInBox(character, box)
    local characterPosition = character.PrimaryPart.Position
    local boxCFrame = box.CFrame
    local boxSize = box.Size
    local relativePosition = boxCFrame:pointToObjectSpace(characterPosition)

    return math.abs(relativePosition.x) <= boxSize.x / 2 and
           math.abs(relativePosition.y) <= boxSize.y / 2 and
           math.abs(relativePosition.z) <= boxSize.z / 2
end

mouse.Button2Up:Connect(function()
    if not isEnabled then return end

    local character = player.Character or player.CharacterAdded:Wait()
    local primaryPart = character:FindFirstChild("HumanoidRootPart")
    
    if not primaryPart then return end

    if isCharacterInBox(character, box1) then
        camera.CFrame = CFrame.new(camera.CFrame.Position, sensorGoal1.Position)
    elseif isCharacterInBox(character, box2) then
        camera.CFrame = CFrame.new(camera.CFrame.Position, sensorGoal2.Position)
    end
end)

-- Timer to disable the script after 60 seconds
task.delay(60, function()
    isEnabled = false
    print("Finished Flow")
end)

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    local debounce = false
    local canApplyVelocity = true
    
    local function applyVelocity()
        if canApplyVelocity and not debounce then
            debounce = true
    
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Parent = humanoidRootPart
            bodyVelocity.Velocity = humanoidRootPart.CFrame.UpVector * 48
            bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            game.Debris:AddItem(bodyVelocity, 0.1)
    
            wait(1) -- This acts as a cooldown between key presses
            debounce = false
        end
    end
    
    -- Disable the effect after 60 seconds
    delay(60, function()
        canApplyVelocity = false
    end)


    
    -- Bind the space key to the function
    game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.Space and not gameProcessed then
            applyVelocity()
        end
    end)    
    game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 0
    end)

FlowSection:NewKeybind("Total Defense Flow", "", Enum.KeyCode.NumLock, function()
    game:GetService("ReplicatedStorage"):WaitForChild("FlowTypes"):WaitForChild("Handle"):WaitForChild("BuffRemote"):FireServer()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    local debounce = false
    local canApplyVelocity = true
    
    local function applyVelocity()
        if canApplyVelocity and not debounce then
            debounce = true
    
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Parent = humanoidRootPart
            bodyVelocity.Velocity = humanoidRootPart.CFrame.UpVector * 52
            bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            game.Debris:AddItem(bodyVelocity, 0.1)
    
            wait(1) -- This acts as a cooldown between key presses
            debounce = false
        end
    end
    
    -- Disable the effect after 60 seconds
    delay(60, function()
        canApplyVelocity = false
    end)
    
    -- Bind the space key to the function
    game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.Space and not gameProcessed then
            applyVelocity()
        end
    end)    
    game:GetService("Players").PutUsernameHere.PlayerGui.GeneralGUI.EGO.ego.Value = 0
    end)


local Tab = Window:NewTab("Dribbling")
local DribbleSection = Tab:NewSection("Blantant Without Animations")

DribbleSection:NewKeybind("StealBreak", "Less Blatant Steal", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector,
        [2] = 125,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Left Chop", "Simple But Effective", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 125,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Nutmeg", "Simple But Effective", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 50,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

        local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.lookVector/1.7,
        [2] = 0,
        [3] = 40,
        [4] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Right Chop", "Simple But Effective", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector,
        [2] = 125,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Powerful  UpFlick", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 150,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Tap Lift", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Vector3.new(0,1,0),
        [2] = 99,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)


DribbleSection:NewKeybind("Heel Flick", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.Head.CFrame.UpVector,
        [2] = 123,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("L Spinning Flick Up", "Simple But Effective", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 140,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "right",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/1.75
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
end)

DribbleSection:NewKeybind("R Spinning Flick Up", "Simple But Effective", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 140,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = true,
        [8] = "right",
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false,
        [21] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/1.75
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
    
end)

DribbleSection:NewKeybind("Rainbow Flick", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*1.53 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*1.13,
    [2] = 65,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = false,
    [7] = false,
    [9] = false,
    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
    [11] = 40,
    [12] = false,
    [13] = false,
    [14] = false,
    [15] = false,
    [16] = false,
    [17] = false,
    [18] = false
}

game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Sombero Flick", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*1.53 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*1.13,
    [2] = 65,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = false,
    [7] = false,
    [9] = false,
    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
    [11] = 40,
    [12] = false,
    [13] = false,
    [14] = false,
    [15] = false,
    [16] = false,
    [17] = false,
    [18] = false
}

game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("L Rainbow  Flickup", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*1.53 + -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector*1.1,
    [2] = 65,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = false,
    [7] = false,
    [9] = false,
    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
    [11] = 40,
    [12] = false,
    [13] = false,
    [14] = false,
    [15] = false,
    [16] = false,
    [17] = false,
    [18] = false
}

game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("R Rainbow Flickup", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local args = {
    [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*1.53 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector*1.1,
    [2] = 65,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = false,
    [7] = false,
    [9] = false,
    [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
    [11] = 40,
    [12] = false,
    [13] = false,
    [14] = false,
    [15] = false,
    [16] = false,
    [17] = false,
    [18] = false
}

game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Threading Uplift", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2,
        [2] = 0,
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Gyro"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Piercing Rainbow", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector/1.12 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2,
        [2] = 0,
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Gyro"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Piercing Sombero", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = -Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector/1.12 + Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector/2,
        [2] = 0,
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Gyro"):FireServer(unpack(args))
end)
local DribbleSection = Tab:NewSection("Traps")

DefenseSection:NewKeybind("Chest Takedown", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12933738311,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Get the position of the character's HumanoidRootPart
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local characterPosition = humanoidRootPart.Position

-- Get the direction towards the cursor
local direction = (mouse.Hit.p - characterPosition).unit

-- Construct the arguments table with the direction as LookVector
local args = {
    [1] = direction * 1.3,  -- Updated to follow the cursor
    [2] = 0,
    [3] = 40,
    [4] = true
}

-- Fire the server event with the arguments
game:GetService("ReplicatedStorage"):WaitForChild("ChestBump"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Relaxing Foot Trap", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.Head.CFrame.UpVector,
        [2] = 25,
        [3] = false,
        [4] = false,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false,
        [20] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))    
end)

DribbleSection:NewKeybind("Trap", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12830711336,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector,
        [2] = 55,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = true,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))

            local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector,
        [2] = 40,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(0,0,0),
        [11] = 0,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end)

DribbleSection:NewKeybind("Back Trap", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12933738311,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/2.7,
        [2] = 40,
        [3] = 40,
        [4] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

local DribbleSection = Tab:NewSection("Perfect Ball Control")

DribbleSection:NewKeybind("Black Hole Takedown", "", Enum.KeyCode.NumLock, function()
    local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*30
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    game.Debris:AddItem(bodyVelocity, .1)

    wait(0.15)

    local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local duration = 2 -- Duration in seconds
local startTime = tick()
local rightClickStartTime

local function notify(title, message)
    print(title .. ': ' .. message)
end

local function refreshAnimations()
    local Char = player.Character or player.CharacterAdded:Wait()
    local Human = Char:WaitForChild('Humanoid', 15)
    local Animate = Char:WaitForChild('Animate', 15)
    
    if not Human or not Animate then
        notify('Refresh Animations', 'Failed to get Animate/Humanoid')
        return
    end
    
    Animate.Disabled = true
    for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
        v:Stop()
    end
    Animate.Disabled = false
    
    notify('Refresh Animations', 'Animations refreshed successfully')
end

local function playAnimation(animationId, speed)
    local speaker = game:GetService("Players").PutUsernameHere
    
    function r15(plr)
        if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    if not r15(speaker) then
        local pchar = speaker.Character
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://" .. tostring(animationId)
        local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        k:Play()
        if speed then
            k:AdjustSpeed(tonumber(speed))
        end
    else
        notify('R6 Required', 'This command requires the r6 rig type')
    end
end

local function calculatePower(holdDuration)
    local minPower = 150 -- Minimum power
    local maxPower = 200 -- Maximum power
    local maxHoldTime = .8 -- Maximum hold time in seconds

    holdDuration = math.min(holdDuration, maxHoldTime)
    local power = minPower + ((holdDuration / maxHoldTime) * (maxPower - minPower))
    return power
end

local function fireShot(mousePosition, holdDuration)
    local power = calculatePower(holdDuration)

    local shootDirection = (mousePosition - player.Character.HumanoidRootPart.Position).unit

    local args = {
        [1] = shootDirection + player.Character.HumanoidRootPart.CFrame.UpVector/15,
        [2] = power,
        [3] = false,
        [4] = true,
        [5] = false,
        [6] = false,
        [7] = false,
        [9] = false,
        [10] = Color3.new(
        Workspace.PutUsernameHere.AuraColour.Red.Value,
        Workspace.PutUsernameHere.AuraColour.Green.Value,
        Workspace.PutUsernameHere.AuraColour.Blue.Value
    ),
        [11] = 40,
        [12] = false,
        [13] = false,
        [14] = false,
        [15] = false,
        [16] = false,
        [17] = false,
        [18] = false
    }

    game:GetService("ReplicatedStorage"):WaitForChild("shoot"):FireServer(unpack(args))
end

local function checkDuration()
    if tick() - startTime > duration then
        if inputBeganConnection then inputBeganConnection:Disconnect() end
        if inputEndedConnection then inputEndedConnection:Disconnect() end
        notify("Script", "Script duration ended.")
    end
end

local inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
    checkDuration()
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        rightClickStartTime = tick()
        wait(0.1)
        playAnimation(13082657041, 1)
    end
end)

local inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
    checkDuration()
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        refreshAnimations()
        playAnimation(12830711336, 1)
        
        local mouse = player:GetMouse()
        local mousePosition = mouse.Hit.p
        local holdDuration = tick() - rightClickStartTime
        fireShot(mousePosition, holdDuration)
    end
end)

-- Schedule the script to stop after the duration
delay(duration, function()
    if inputBeganConnection then inputBeganConnection:Disconnect() end
    if inputEndedConnection then inputEndedConnection:Disconnect() end
    notify("Script", "Script duration ended.")
end)

    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.LookVector*math.huge,
        [2] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.UpVector*math.huge,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("SpecEvents"):WaitForChild("Nagi"):FireServer(unpack(args))

        local HumanoidRootPart = game.Workspace.PutUsernameHere.HumanoidRootPart
    local plr = game.Players.PutUsernameHere
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Parent = HumanoidRootPart
    bodyVelocity.Velocity = Vector3.new(0, 2, 0)
    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
    game.Debris:AddItem(bodyVelocity, 2)
    	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 13209346478,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
-- Get the character and humanoid
local character = game.Players.LocalPlayer.Character
local humanoid = character:WaitForChild("Humanoid")

-- Function to disable rotation
local function disableRotation()
    humanoid.AutoRotate = false
end

-- Call the function to disable rotation
disableRotation()
wait(1.75)
-- Get the character and humanoid
local character = game.Players.LocalPlayer.Character
local humanoid = character:WaitForChild("Humanoid")

-- Function to disable rotation
local function disableRotation()
    humanoid.AutoRotate = true
end

-- Call the function to disable rotation
disableRotation()
end)

DribbleSection:NewKeybind("Back Trap", "", Enum.KeyCode.NumLock, function()
	local speaker = game:GetService("Players").PutUsernameHere
local plr = game:GetService("Players").PutUsernameHere
local args = {
   [1] = 12933738311,
   [2] = 1,
}

function r15(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end

if not r15(speaker) then
    local pchar = speaker.Character
    local AnimationId = tostring(args[1])
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
    k:Play()
    if args[2] then
        k:AdjustSpeed(tostring(args[2]))
    end
else
    notify('R6 Required','This command requires the r6 rig type')
end
    local args = {
        [1] = Workspace.PutUsernameHere.HumanoidRootPart.CFrame.RightVector/2.7,
        [2] = 40,
        [3] = 40,
        [4] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Header"):FireServer(unpack(args))
end)

local Tab = Window:NewTab("Prowess")
local VisionSection = Tab:NewSection("Vision")

VisionSection:NewButton("Off The Ball Movements", "Sprint Speed Faster When Off The Ball", function()
-- Define the path to the TextLabel
local textLabel = game.Players.PutUsernameHere.PlayerGui.GeneralGUI.cooldowns.Trait.TextLabel

-- Change the text of the TextLabel with additional new lines to position "G" further down
textLabel.Text = "OFF THE BALL"
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local maxSpeed = 5 -- Maximum speed
local normalSpeed = 0 -- Default speed when not holding shift
local isAccelerating = false

local ball = game.Workspace.BallFolder.Ball
local range = 15 -- Define the range within which the script should be disabled

-- Function to update movement speed based on MoveDirection
local function updateMovementSpeed()
    local delta = runService.RenderStepped:Wait()
    if humanoid.MoveDirection.Magnitude > 0 then
        local speed = isAccelerating and maxSpeed or normalSpeed
        local moveDirection = humanoid.MoveDirection
        character:TranslateBy(moveDirection * speed * delta)
    end
end

-- Function to check the distance to the ball and update states
local function checkDistanceToBall()
    local distance = (character.PrimaryPart.Position - ball.Position).Magnitude
    if distance <= range then
        isAccelerating = false
    end
end

-- Toggle acceleration when Shift is pressed or released
local function onShiftInput(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        if input.UserInputState == Enum.UserInputState.Begin then
            local distance = (character.PrimaryPart.Position - ball.Position).Magnitude
            if distance > range then
                isAccelerating = true
            end
        elseif input.UserInputState == Enum.UserInputState.End then
            isAccelerating = false
        end
    end
end

userInputService.InputBegan:Connect(onShiftInput)
userInputService.InputEnded:Connect(onShiftInput)
runService.RenderStepped:Connect(checkDistanceToBall)
runService.RenderStepped:Connect(updateMovementSpeed)
 end)
    

local Tab = Window:NewTab("Miscallaneous")
local MiscSection = Tab:NewSection("")

MiscSection:NewButton("Infinite Stamina", "", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local userInputService = game:GetService("UserInputService")
    local runService = game:GetService("RunService")
    local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://13124893453"
    local animationTrack = animator:LoadAnimation(animation)
    
    local maxSpeed = 15 -- Maximum speed
    local normalSpeed = 0 -- Default speed when not holding shift
    local isAccelerating = false
    local isAnimating = false
    
    -- Function to update movement speed based on MoveDirection
    local function updateMovementSpeed()
        local delta = runService.RenderStepped:Wait()
        if humanoid.MoveDirection.Magnitude > 0 then
            local speed = isAccelerating and maxSpeed or normalSpeed
            local moveDirection = humanoid.MoveDirection
            character:TranslateBy(moveDirection * speed * delta)
        end
    end
    
    -- Play animation when Shift is pressed
    local function onShiftPress(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.LeftShift then
            isAccelerating = true
            if not isAnimating then
                isAnimating = true
                animationTrack:Play()
            end
        end
    end
    
    -- Refresh animations when Shift is released
    local function onShiftRelease(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.LeftShift then
            isAccelerating = false
            if isAnimating then
                isAnimating = false
                animationTrack:Stop()
                -- Refresh animations if needed
                humanoid:LoadAnimation(animation)
            end
        end
    end
    
    userInputService.InputBegan:Connect(onShiftPress)
    userInputService.InputEnded:Connect(onShiftRelease)
    
    -- Update movement speed continuously
    runService.RenderStepped:Connect(updateMovementSpeed)
    
    -- Check for "Sprint" script and set its RunContext to Server
    local movementFolder = Workspace:FindFirstChild("PutUsernameHere"):FindFirstChild("Movement")
    
    if movementFolder then
        local sprintScript = movementFolder:FindFirstChild("Sprint")
        if sprintScript then
            sprintScript.RunContext = Enum.RunContext.Server
            print("RunContext of Sprint successfully changed to Server")
        else
            warn("Sprint script not found")
        end
    else
        warn("Movement folder not found")
    end   
    end)

MiscSection:NewButton("Anti Ankle Break", "", function()
-- Reference to ReplicatedStorage and Workspace
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Check if ReplicatedStorage.Ragdoll exists and delete it
local ragdollReplicatedStorage = ReplicatedStorage:FindFirstChild("Ragdoll")
if ragdollReplicatedStorage then
    ragdollReplicatedStorage:Destroy()
end

-- Check if Workspace.PutUsernameHere.Ragdoll exists and delete it
local ragdollWorkspace = Workspace:FindFirstChild("PutUsernameHere")
if ragdollWorkspace then
    local ragdoll = ragdollWorkspace:FindFirstChild("Ragdoll")
    if ragdoll then
        ragdoll:Destroy()
    end
end
end)

MiscSection:NewToggle("Anti Ragdoll", "", function(state)
    if state then
        local movementFolder = Workspace:FindFirstChild("PutUsernameHere"):FindFirstChild("Movement")

        if movementFolder then
            local ragdollScript = movementFolder:FindFirstChild("ragdoll")
            if ragdollScript then
                ragdollScript.RunContext = Enum.RunContext.Server
                print("RunContext of ragdoll successfully changed to Server")
            else
                warn("ragdoll script not found")
            end
        else
            warn("Movement folder not found")
        end
        
    else
        local movementFolder = Workspace:FindFirstChild("PutUsernameHere"):FindFirstChild("Movement")

        if movementFolder then
            local ragdollScript = movementFolder:FindFirstChild("ragdoll")
            if ragdollScript then
                ragdollScript.RunContext = Enum.RunContext.Legacy
                print("RunContext of ragdoll successfully changed to Legacy")
            else
                warn("ragdoll script not found")
            end
        else
            warn("Movement folder not found")
        end
        
    end
end)

MiscSection:NewToggle("Anti Jump Fatigue", "", function(state)
    if state then
        local scriptPath = Workspace:FindFirstChild("PutUsernameHere"):FindFirstChild("Movement"):FindFirstChild("JumpFatigue")

        if scriptPath then
            scriptPath.RunContext = Enum.RunContext.Server
            print("RunContext successfully changed to Server")
        else
            warn("Script not found at the specified path")
        end        
    else
        local scriptPath = Workspace:FindFirstChild("PutUsernameHere"):FindFirstChild("Movement"):FindFirstChild("JumpFatigue")

        if scriptPath then
            scriptPath.RunContext = Enum.RunContext.Legacy
            print("RunContext successfully changed to Legacy")
        else
            warn("Script not found at the specified path")
        end        
    end
end)

MiscSection:NewButton("Delete GK Bind", "Removes GK Bind", function()
    Players.PutUsernameHere.PlayerGui.GeneralGUI.cooldowns.GKButton:Destroy()
end)

MiscSection:NewButton("Pull Aura Color", "Allows you to Pull Your Flow Color", function()
-- Accessing the PutUsernameHere and AuraColour properties under Workspace
local workspace = game:GetService("Workspace")
local PutUsernameHere = workspace.PutUsernameHere
local auraColor = PutUsernameHere.AuraColour

-- Getting the numerical RGB values
local redValue = auraColor.Red.Value
local greenValue = auraColor.Green.Value
local blueValue = auraColor.Blue.Value

-- Printing the values
print("Red:", redValue)
print("Green:", greenValue)
print("Blue:", blueValue)
-- Accessing the PutUsernameHere and AuraColour properties under Workspace
local workspace = game:GetService("Workspace")
local PutUsernameHere = workspace.PutUsernameHere
local auraColor = PutUsernameHere.AuraColour

-- Getting the numerical RGB values
local redValue = auraColor.Red.Value
local greenValue = auraColor.Green.Value
local blueValue = auraColor.Blue.Value

-- Printing the values
print("Red:", redValue)
print("Green:", greenValue)
print("Blue:", blueValue)
end)

MiscSection:NewButton("Max Game Yen (AutoFarm)", "Removes Penalty Box", function()
    local args = {
        [1] = math.huge
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("endgameyen"):FireServer(unpack(args))
end)

MiscSection:NewButton("Infinite Yield", "", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

MiscSection:NewButton("Box Extender (TEAM WHITE/RIGHTU20", "Removes Penalty Box", function()
    workspace.Box.Box1.Size = Vector3.new(999,999,999)
end)

MiscSection:NewButton("Box Extender (TEAM RED/LEFTU20)", "Removes Penalty Box", function()
    workspace.Box.Box2.Size = Vector3.new(999,999,999)
end)

MiscSection:NewButton("Box Remover (TEAM WHITE/RIGHTU20", "Removes Penalty Box", function()
    workspace.Box.Box1:Destroy()
end)

MiscSection:NewButton("Box Remover (TEAM RED/LEFTU20)", "Removes Penalty Box", function()
    workspace.Box.Box2:Destroy()
end)

MiscSection:NewButton("Box Dampen (TEAM WHITE/RIGHTU20", "Removes Penalty Box", function()
    workspace.Box.Box1.Size = Vector3.new(202.9199981689453, 33.89999771118164, 113.01231384277344)
end)

MiscSection:NewButton("Box Dampen (TEAM RED/LEFTU20)", "Removes Penalty Box", function()
    workspace.Box.Box2.Size = Vector3.new(202.9199981689453, 33.89999771118164, 113.01231384277344)
end)

MiscSection:NewButton("SubSpy", "", function()
    loadstring(game:HttpGet("https://gist.githubusercontent.com/Andergraun/b435bde510c9a6c211a0a6a1bc8de634/raw/32ad40d294a39f0fbac6e793c4472b6a11ef60bc/Subplaces", true))()
end)

MiscSection:NewButton("Training (NOCD)", "", function()
    workspace.TrainingMode.Value = not workspace.TrainingMode.Value
end)

MiscSection:NewKeybind("Instantaneous Neurotic", "", Enum.KeyCode.NumLock, function()
    local args = {
        [1] = 0,
        [2] = 0,
        [3] = true,
        [4] = false
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Ragdoll"):FireServer(unpack(args))
    
end)

MiscSection:NewKeybind("UI Toggle", "", Enum.KeyCode.LeftAlt, function()
	Library:ToggleUI()
end)
